name: Build and deploy ProPath to AKS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  NAMESPACE: "propath"  # Solo esto puede quedar p√∫blico

jobs:
  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secrets
        run: |
          kubectl create secret generic propath-secrets \
            --from-literal=postgres-password="${{ secrets.POSTGRES_PASSWORD }}" \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --from-literal=jwt-refresh-secret="${{ secrets.JWT_REFRESH_SECRET }}" \
            --from-literal=gemini-api-key="${{ secrets.GEMINI_API_KEY }}" \
            --from-literal=smtp-pass="${{ secrets.SMTP_PASS }}" \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy PostgreSQL
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: postgres-pvc
            namespace: ${{ env.NAMESPACE }}
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: postgres
            template:
              metadata:
                labels:
                  app: postgres
              spec:
                containers:
                - name: postgres
                  image: postgres:14
                  ports:
                  - containerPort: 5432
                  env:
                  - name: POSTGRES_USER
                    value: "propath"
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: postgres-password
                  - name: POSTGRES_DB
                    value: "propath_db"
                  volumeMounts:
                  - name: postgres-storage
                    mountPath: /var/lib/postgresql/data
                volumes:
                - name: postgres-storage
                  persistentVolumeClaim:
                    claimName: postgres-pvc
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: postgres
            ports:
            - port: 5432
              targetPort: 5432
          EOF

      - name: Deploy microservices
        run: |
          cat <<EOF | kubectl apply -f -
          # Path Management Service
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: path-management
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: path-management
            template:
              metadata:
                labels:
                  app: path-management
              spec:
                containers:
                - name: path-management
                  image: notkuello/propath-backend-path-management:latest
                  ports:
                  - containerPort: 3001
                  env:
                  - name: PORT
                    value: "3001"
                  - name: HOST
                    value: "0.0.0.0"
                  - name: DB_HOST
                    value: "postgres"
                  - name: DB_PORT
                    value: "5432"
                  - name: DB_USERNAME
                    value: "propath"
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: postgres-password
                  - name: DB_NAME
                    value: "propath_db"
                  - name: DB_SYNC
                    value: "true"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: path-management
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: path-management
            ports:
            - port: 3001
              targetPort: 3001
          ---
          # Auth Service
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: auth-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: auth-service
            template:
              metadata:
                labels:
                  app: auth-service
              spec:
                containers:
                - name: auth-service
                  image: notkuello/propath-backend-auth-service:latest
                  ports:
                  - containerPort: 3002
                  env:
                  - name: PORT
                    value: "3002"
                  - name: HOST
                    value: "0.0.0.0"
                  - name: DB_HOST
                    value: "postgres"
                  - name: DB_PORT
                    value: "5432"
                  - name: DB_USERNAME
                    value: "propath"
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: postgres-password
                  - name: DB_NAME
                    value: "propath_db"
                  - name: DB_SYNC
                    value: "true"
                  - name: JWT_SECRET
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: jwt-secret
                  - name: JWT_REFRESH_SECRET
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: jwt-refresh-secret
                  - name: JWT_EXPIRATION
                    value: "7d"
                  - name: JWT_REFRESH_EXPIRATION
                    value: "10d"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: auth-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: auth-service
            ports:
            - port: 3002
              targetPort: 3002
          ---
          # User Management Service
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: user-management
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: user-management
            template:
              metadata:
                labels:
                  app: user-management
              spec:
                containers:
                - name: user-management
                  image: notkuello/propath-backend-user-management:latest
                  ports:
                  - containerPort: 3003
                  env:
                  - name: PORT
                    value: "3003"
                  - name: HOST
                    value: "0.0.0.0"
                  - name: DB_HOST
                    value: "postgres"
                  - name: DB_PORT
                    value: "5432"
                  - name: DB_USERNAME
                    value: "propath"
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: postgres-password
                  - name: DB_NAME
                    value: "propath_db"
                  - name: DB_SYNC
                    value: "true"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: user-management
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: user-management
            ports:
            - port: 3003
              targetPort: 3003
          ---
          # AI Service
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ai-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ai-service
            template:
              metadata:
                labels:
                  app: ai-service
              spec:
                containers:
                - name: ai-service
                  image: notkuello/propath-backend-ai-service:latest
                  ports:
                  - containerPort: 3004
                  env:
                  - name: HOST
                    value: "0.0.0.0"
                  - name: PORT
                    value: "3004"
                  - name: GEMINI_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: gemini-api-key
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ai-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: ai-service
            ports:
            - port: 3004
              targetPort: 3004
          ---
          # SMTP Service
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: smtp-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: smtp-service
            template:
              metadata:
                labels:
                  app: smtp-service
              spec:
                containers:
                - name: smtp-service
                  image: notkuello/propath-backend-smtp-service:latest
                  ports:
                  - containerPort: 3005
                  env:
                  - name: HOST
                    value: "0.0.0.0"
                  - name: PORT
                    value: "3005"
                  - name: SMTP_HOST
                    value: "smtp.gmail.com"
                  - name: SMTP_PORT
                    value: "587"
                  - name: SMTP_USER
                    value: ${{ secrets.SMTP_USER }}
                  - name: SMTP_PASS
                    valueFrom:
                      secretKeyRef:
                        name: propath-secrets
                        key: smtp-pass
                  - name: EMAIL_FROM
                    value: ${{ secrets.EMAIL_FROM }}
                  - name: EMAIL_SUBJECT
                    value: "Your ProPath Account Password"
                  - name: EMAIL_TEMPLATE
                    value: "password-template.hbs"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: smtp-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: smtp-service
            ports:
            - port: 3005
              targetPort: 3005
          ---
          # API Gateway
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-gateway
            namespace: ${{ env.NAMESPACE }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: api-gateway
            template:
              metadata:
                labels:
                  app: api-gateway
              spec:
                containers:
                - name: api-gateway
                  image: notkuello/propath-backend-api-gateway:latest
                  ports:
                  - containerPort: 3000
                  env:
                  - name: PORT
                    value: "3000"
                  - name: PATH_MICROSERVICE_HOST
                    value: "path-management"
                  - name: PATH_MICROSERVICE_PORT
                    value: "3001"
                  - name: USER_MICROSERVICE_HOST
                    value: "user-management"
                  - name: USER_MICROSERVICE_PORT
                    value: "3003"
                  - name: AUTH_MICROSERVICE_HOST
                    value: "auth-service"
                  - name: AUTH_MICROSERVICE_PORT
                    value: "3002"
                  - name: AI_MICROSERVICE_HOST
                    value: "ai-service"
                  - name: AI_MICROSERVICE_PORT
                    value: "3004"
                  - name: SMTP_MICROSERVICE_HOST
                    value: "smtp-service"
                  - name: SMTP_MICROSERVICE_PORT
                    value: "3005"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: api-gateway
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: api-gateway
            ports:
            - port: 3000
              targetPort: 3000
            type: LoadBalancer
          EOF

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/postgres -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=available --timeout=300s deployment/path-management -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=available --timeout=300s deployment/auth-service -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=available --timeout=300s deployment/user-management -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=available --timeout=300s deployment/ai-service -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=available --timeout=300s deployment/smtp-service -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=available --timeout=300s deployment/api-gateway -n ${{ env.NAMESPACE }}

      - name: Get service info
        run: |
          echo "Deployment completed!"
          kubectl get services -n ${{ env.NAMESPACE }}
          echo "API Gateway external IP:"
          kubectl get service api-gateway -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
